// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), uuid_ossp(map: "uuid-ossp")]
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  name      String
  password  String
  user_type String @default("free_user")

  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  Collection    Collection[]
  UplodadedFile UplodadedFile[]

  @@map("users") // Renomeia a table para users, dentro do banco
}

// ----------------------------------------------------------

model Collection {
  id            String @id @default(uuid())
  user_owner    User   @relation(fields: [user_owner_id], references: [id])
  user_owner_id String

  collection_name String

  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("collection")
}

// Arquivo upado em bytes
model UplodadedFile {
  id            String @id @default(uuid())
  user_owner    User   @relation(fields: [user_owner_id], references: [id])
  user_owner_id String

  // Implementar futuramente e remover a relação direta com o usuário
  // collection_owner    Collection @relation(fields: [collection_owner_id], references: [id])
  // collection_owner_id String

  file_name        String
  data_bytes       Bytes
  embeddings_useds Int?

  create_at  DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("uploaded_file")
}

// Arquivo PgVector
model DocumentVector {
  id        Int                    @id @default(autoincrement())
  embedding Unsupported("vector")?
  content   String?
  metadata  Json? // page_content | metadata | user_owner_id | collection_owner_id | file_owner_id

  create_at DateTime @default(now())
  // updated_at DateTime @updatedAt

  @@map("document_vector")
}
